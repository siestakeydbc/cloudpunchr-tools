#!/usr/bin/env python3

import boto3
import botocore
import argparse
import threading

def check_bucket(bucket_name):
    s3 = boto3.client("s3", config=botocore.config.Config(signature_version=botocore.UNSIGNED))
    try:
        response = s3.list_objects_v2(Bucket=bucket_name)
        if 'Contents' in response:
            print(f"[+] {bucket_name} - LIST accessible")
            key = response['Contents'][0]['Key']
            obj = s3.get_object(Bucket=bucket_name, Key=key)
            print(f"[+] {bucket_name} - READ access: {key}")
    except botocore.exceptions.ClientError as e:
        code = e.response['Error']['Code']
        if code == 'AccessDenied':
            print(f"[-] {bucket_name} - Access Denied")
        elif code == 'NoSuchBucket':
            print(f"[-] {bucket_name} - Bucket does not exist")
        else:
            print(f"[!] {bucket_name} - Error: {code}")

def main():
    parser = argparse.ArgumentParser(description="S3 Bucket Enumerator")
    parser.add_argument('--wordlist', required=True, help='Path to bucket name list')
    parser.add_argument('--threads', type=int, default=5, help='Number of threads')
    args = parser.parse_args()

    with open(args.wordlist, 'r') as f:
        buckets = [line.strip() for line in f]

    threads = []
    for bucket in buckets:
        t = threading.Thread(target=check_bucket, args=(bucket,))
        threads.append(t)
        t.start()

        if len(threads) >= args.threads:
            for t in threads:
                t.join()
            threads = []

if __name__ == '__main__':
    main()
